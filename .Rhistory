target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
# target is character
score_network <- function(disease_network = disease_network, target = target, method){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- unique(target)
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
if (method == "degree") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
return(degree)
}
if (method == "distance") {
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
return(distance)
}
if (method == "total") {
total_disturbance_rate <- distance - degree
return(total_disturbance_rate)
}
}
res3_list <- pbapply::pblapply(result@Target, function(x){
degree <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "degree"))
distance <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F
),
target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
res3_list <- pbapply::pblapply(result@Target, function(x){
degree <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "degree"))
distance <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F
),
target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
# target is character
score_network <- function(disease_network = disease_network, target = target, method){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- unique(target)
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
if (method == "degree") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
return(degree)
}
if (method == "distance") {
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
return(distance)
}
if (method == "total") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
total_disturbance_rate <- distance - degree
return(total_disturbance_rate)
}
}
# target is character
score_network <- function(disease_network = disease_network, target = target, method){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- unique(target)
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
if (method == "degree") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
return(degree)
}
if (method == "distance") {
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
return(distance)
}
if (method == "total") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
total_disturbance_rate <- distance - degree
return(total_disturbance_rate)
}
}
res3_list <- pbapply::pblapply(result@Target, function(x){
degree <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "degree"))
distance <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F
),
target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
res3_list1 <- as.data.frame(res3_list)
DT::datatable(res3_list1)
res3_list <- as.data.frame(res3_list)
names(result@Target)
res3_list <- as.data.frame(t(res3_list))
DT::datatable(res3_list)
res3_list$Drug <- names(result@Target)
DT::datatable(res3_list)
res3_list <- merge(res3_list, res2_list, by="Drug",sort = F)
DT::datatable(res3_list)
res3_list$Mean_degree_adjust <- (res3_list$Mean_degree_disturbance_rate - res3_list$mean_degree)/res3_list$sd_degree
res3_list$Mean_distance_adjust <- (res3_list$Mean_distance_disturbance_rate - res3_list$mean_distance)/res3_list$sd_distance
res3_list$Total_adjust <- (res3_list$Total_disturbance_rate - res3_list$mean_total)/res3_list$sd_total
DT::datatable(res3_list)
use_package("dplyr")
#####################################################
load_all()
class(res1)
res2 <- score_adjust(res1, n=50)
DT::datatable(res2@ScoreResult)
res2 <- score_adjust(res1, n=50)
#####################################################
load_all()
res2 <- score_adjust(res1, n=50)
res2 <- score_adjust(res2, n=50)
DT::datatable(res2@ScoreResult)
devtools::document()
#####################################################
load_all()
#####################################################
library(usethis)
library(devtools)
load_all()
###############################################
data("covid19")
###############################################
data("COVID19")
r1 <- extrFP(disease_biomarker = COVID19$disease_biomarker,
drug_target = COVID19$herb_target,
geneset = NULL)
load_all()
r1 <- extrFP(disease_biomarker = COVID19$disease_biomarker,
drug_target = COVID19$herb_target,
geneset = NULL)
load_all()
r1 <- extrFP(disease_biomarker = COVID19$disease_biomarker,
drug_target = COVID19$herb_target,
geneset = NULL)
load_all()
r1 <- extrFP(disease_biomarker = COVID19$disease_biomarker,
drug_target = COVID19$herb_target,
geneset = NULL)
str(r1)
load_all()
r1 <- extrFP(disease_biomarker = COVID19$disease_biomarker,
drug_target = COVID19$herb_target,
geneset = NULL)
load_all()
r1 <- extrFP(disease_biomarker = COVID19$disease_biomarker,
drug_target = COVID19$herb_target,
geneset = NULL)
r2 <- score_immpc(r1, disease_network = COVID19$disease_network)
load_all()
r2 <- score_immpc(r1, disease_network = COVID19$disease_network)
library(dplyr)
load_all()
r2 <- score_immpc(r1, disease_network = COVID19$disease_network)
DT::datatable(r2@ScoreResult)
load_all()
r3 <- score_adjust(r2, n=100)
DT::datatable(r3@ScoreResult)
#####################################################
library(usethis)
library(devtools)
load_all()
############################################
data("COVID19")
druglist <- get_list(COVID19$herb_target)
load_all()
druglist <- get_list(COVID19$herb_target)
dataframe <- COVID19$herb_target[,c(1,2)]
names(dataframe) <- c("c1", "c2")
target0 <- list()
for (i in unique(dataframe[,1])) {
target1 <- dataframe$c2[dataframe$c1 == i]
target1 <- list(target1)
target0 <- c(target0, target1)
}
load_all()
druglist <- get_list(COVID19$herb_target)
res_net <- score_network(druglist, COVID19$disease_network)
load_all()
res_net <- score_network(druglist, COVID19$disease_network)
load_all()
res_net <- score_network(druglist, COVID19$disease_network)
load_all()
res_net <- score_network(druglist, COVID19$disease_network)
load_all()
res_net <- score_network(druglist, COVID19$disease_network)
load_all()
res_net <- score_network(druglist, COVID19$disease_network)
DT::datatable(res_net@ScoreResult)
score_network_s <- function(disease_network, target, method = "all"){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- graph.data.frame(disease_network, directed = F)
g2 <- graph.data.frame(disease_network2, directed = F)
degree <- (mean(centr_degree(g2)$res) - mean(centr_degree(g1)$res))/mean(centr_degree(g1)$res)
mean_distance <- (mean_distance(g2, directed = F, unconnected = TRUE) - mean_distance(g1, directed = F, unconnected = TRUE))/mean_distance(g1, directed = F, unconnected = TRUE)
Total_disturbance_rate <- mean_distance - degree
if(method == "all"){
res_network <- c(degree, mean_distance, Total_disturbance_rate)
names(res_network) <- c("Mean_degree_disturbance_rate", "Mean_distance_disturbance_rate", "Total_disturbance_rate")
return(res_network)
}
if (method == "degree") {
return(degree)
}
if (method == "distance") {
return(mean_distance)
}
if (method == "total") {
return(Total_disturbance_rate)
}
}
cat("Calculating \n")
targetlist <- druglist
net1 <- pbapply::pblapply(targetlist, function(x){
score_network_s(disease_network = disease_network, target = x, method = "all")
})
disease_network <- COVID19$disease_network
net1 <- pbapply::pblapply(targetlist, function(x){
score_network_s(disease_network = disease_network, target = x, method = "all")
})
net2 <- as.data.frame(net1) %>%
t() %>%
as.data.frame()
net2 <- data.frame(Drug = names(targetlist),
Mean_degree_disturbance_rate = net2$Mean_degree_disturbance_rate,
Mean_distance_disturbance_rate = net2$Mean_distance_disturbance_rate,
Total_disturbance_rate = net2$Total_disturbance_rate)
View(net2)
res3_list <- pbapply::pblapply(targetlist, function(x){
set.seed(1234)
disease_network_r <- data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F)
degree <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "degree"))
distance <- replicate(n, score_network_s(disease_network = disease_network_r,target = x,method = "distance"))
total <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
return(res_r2)
})
n=10
res3_list <- pbapply::pblapply(targetlist, function(x){
set.seed(1234)
disease_network_r <- data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F)
degree <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "degree"))
distance <- replicate(n, score_network_s(disease_network = disease_network_r,target = x,method = "distance"))
total <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
return(res_r2)
})
res3_list <- as.data.frame(res3_list) %>%
t() %>%
as.data.frame()
View(res3_list)
n=100
res3_list <- pbapply::pblapply(targetlist, function(x){
set.seed(1234)
disease_network_r <- data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F)
degree <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "degree"))
distance <- replicate(n, score_network_s(disease_network = disease_network_r,target = x,method = "distance"))
total <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
return(res_r2)
})
score_network_s(disease_network = disease_network, target = targetlist[[1]], method = "degree")
n=10
res3_list <- pbapply::pblapply(targetlist, function(x){
disease_network_r <- data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F)
degree <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "degree"))
distance <- replicate(n, score_network_s(disease_network = disease_network_r,target = x,method = "distance"))
total <- replicate(n, score_network_s(disease_network = disease_network_r, target = x, method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
return(res_r2)
})
res3_list <- pbapply::pblapply(targetlist, function(x){
#disease_network_r <- data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F)
degree <- replicate(n, score_network_s(disease_network = data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F), target = x, method = "degree"))
distance <- replicate(n, score_network_s(disease_network = data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F),target = x,method = "distance"))
total <- replicate(n, score_network_s(disease_network = data.frame(node1 = sample(disease_network[,1]), node2 = sample(disease_network[,2]), stringsAsFactors = F), target = x, method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
return(res_r2)
})
res3_list <- as.data.frame(res3_list) %>%
t() %>%
as.data.frame()
res3_list$Drug <- names(targetlist)
result <- merge(res3_list, net2, by = "Drug")
result$Mean_degree_adjust <- (result$Mean_degree_disturbance_rate - result$mean_degree)/result$sd_degree
result$Mean_distance_adjust <- (result$Mean_distance_disturbance_rate - result$mean_distance)/result$sd_distance
result$Total_network_score_adjust <- (result$Total_disturbance_rate - result$mean_total)/result$sd_total
result <- result[,-c(2:7)]
cat("Done \n")
DT::datatable(result)
res_net <- score_network(druglist, COVID19$disease_network, 10)
DT::datatable(res_net@ScoreResult)
load_all()
res_net <- score_network(druglist, COVID19$disease_network, 10)
DT::datatable(res_net@ScoreResult)
res1 <- extrFP(disease_biomarker=COVID19$disease_biomarker, drug_target=targetlist, geneset =NULL)
load_all()
res1 <- extrFP(disease_biomarker=COVID19$disease_biomarker, drug_target=targetlist, geneset =NULL)
class(res1)
res2 <- score_fp(res1, 10)
DT::datatable(res2@ScoreResult)
usethis::use_package("ggcorrplot")
usethis::use_package("ggplot2")
usethis::use_package("ggsci")
length(list(a=1,b=2))
length(list(a=1,b=2, c=3))
##############################################################
library(clusterProfiler)
set_up <- read.gmt("E:\\immcp\\data\\gene_set_library_dn_crisp.gmt")
head(set_up)
is.data.frame(c(1))
is.data.frame(data.frame(1))
L1000-DN <- set_up
L1000_DN <- set_up
set_up <- read.gmt("E:\\immcp\\data\\gene_set_library_up_crisp.gmt")
L1000_UP <- set_up
CMAP_DN <- read.gmt("E:\\immcp\\data\\gene_set_library_dn_crisp_CMAP.gmt")
CMAP_UP <- read.gmt("E:\\immcp\\data\\gene_set_library_up_crisp_CMAP.gmt")
load("./R/sysdata.rda")
head(genesetlist[[1]])
head(genesetlist[1])
head(genesetlist)
ImmGenTop150 <- genesetlist
genesetlist <- list(
ImmGenTop150,
L1000_DN,
L1000_UP,
CMAP_DN,
CMAP_UP
)
genesetlist <- list(
ImmGenTop150 = ImmGenTop150,
L1000_DN = L1000_DN,
L1000_UP = L1000_UP,
CMAP_DN= CMAP_DN,
CMAP_UP = CMAP_UP
)
head(genesetlist["CMAP_UP"])
head(genesetlist[["CMAP_UP"]])
class(genesetlist[["CMAP_UP"]])
str(genesetlist[["CMAP_UP"]])
str(genesetlist[["ImmGenTop150"]])
L1000_DN$ont <- as.character(L1000_DN$ont)
str(L1000_DN)
L1000_UP$ont <- as.character(L1000_UP$ont)
CMAP_DN$ont <- as.character(CMAP_DN$ont)
CMAP_UP$ont <- as.character(CMAP_UP$ont)
head(CMAP_UP)
str(CMAP_UP)
genesetlist <- list(
ImmGenTop150 = ImmGenTop150,
L1000_DN = L1000_DN,
L1000_UP = L1000_UP,
CMAP_DN= CMAP_DN,
CMAP_UP = CMAP_UP
)
str(genesetlist[["ImmGenTop150"]])
usethis::use_data(genesetlist, internal = T)
usethis::use_package("enrichplot")
output_df = TRUE
output_df = TRUE
output_df == TRUE
usethis::use_package("limma")
?'%>%'
?%>%
??%>%
??"%>%"
usethis::use_package("magrittr")
usethis::use_package("stats")
usethis::use_package("DOSE")
usethis::use_package("utils")
usethis::use_package("clusterProfiler")
devtools::document()
BiocManager::install("AnnotationForge")
hsa_kegg <- clusterProfiler::download_KEGG("hsa")
install.packages("installr")
require(installr)
updateR()
updateR()
install.packages(c("devtools", "DT", "igraph", "pbapply", "proxyC", "usethis"))
installed.packages(c("ggplot2","ggsci"))
installed.packages("ggplot2")
load("sysdata.rda")
load("./R/sysdata.rda")
hsa_kegg <- clusterProfiler::download_KEGG("hsa")
KEGGPATHID2EXTID <- hsa_kegg$KEGGPATHID2EXTID
kegg_name <- clusterProfiler::bitr(KEGGPATHID2EXTID$to, fromType="ENTREZID", #输入为SYMBOL格式
toType="SYMBOL")
kegg_name <- clusterProfiler::bitr(KEGGPATHID2EXTID$to, fromType="ENTREZID", #输入为SYMBOL格式
toType="SYMBOL",OrgDb="org.Hs.eg.db")
KEGGPATHID2EXTID <- merge(KEGGPATHID2EXTID, kegg_name, by.x ="to", by.y="ENTREZID")
KEGGPATHID2EXTID <- hsa_kegg$KEGGPATHID2EXTID
KEGGPATHID2EXTID <- merge(KEGGPATHID2EXTID, kegg_name, by.x ="to", by.y="ENTREZID")
head(KEGGPATHID2EXTID)
KEGGPATHID2NAME <- hsa_kegg$KEGGPATHID2NAME
DT::datatable(KEGGPATHID2NAME)
DT::datatable(KEGGPATHID2NAME)
head(KEGGPATHID2NAME)
write.csv(KEGGPATHID2NAME, file = "KEGGPATHID2NAME.csv")
KEGGPATHID2NAME1 <- read.csv("KEGGPATHID2NAME.csv")
genesetlist <- list(genesetlist$ImmGenTop150, KEGGPATHID2EXTID,KEGGPATHID2NAME, KEGGPATHID2NAME_out)
genesetlist <- list(ImmGenTop150=genesetlist$ImmGenTop150, KEGGPATHID2EXTID=KEGGPATHID2EXTID,KEGGPATHID2NAME=KEGGPATHID2NAME, KEGGPATHID2NAME_out=KEGGPATHID2NAME1)
genesetlist <- list(ImmGenTop150=genesetlist$ImmGenTop150, KEGGPATHID2EXTID=KEGGPATHID2EXTID,KEGGPATHID2NAME=KEGGPATHID2NAME, KEGGPATHID2NAME_out=KEGGPATHID2NAME1$from)
usethis::use_data(genesetlist,internal = T)
library(installr)
install.Rtools()
usethis::use_package("GSEABase")
