enrich_f(x, geneset = geneset0)
})
f$disease
install.packages(pbapply)
install.packages("pbapply")
f <- pbapply::pblapply(target, function(x){
enrich_f(x, geneset = geneset0)
})
proxyC::simil(f$disease,f$半夏泻心汤 ,method = "jaccard")
f1 <- as.data.frame(f)
f1[1:4,1:4]
DT::datatable(f1)
#f1[1:4,1:4]
#DT::datatable(f1)
f1 <- Matrix::Matrix(data=f1)
f1 <- t(f1)
f1[1:4,1:4]
#f1[1:4,1:4]
#DT::datatable(f1)
f1 <- Matrix::Matrix(data=f1)
f1 <- proxyC::simil(f1 ,method = "jaccard")
f1 <- as.data.frame(f1)
f1 <- as.matrix(f1)
f1[1:4,1:4]
use_package(pbapply)
use_package("pbapply")
use_package("Matrix")
f1 <- as.data.frame(f1)
DT::datatable(f1)
f1 <- data.frame(Drug = rownames(f1), Tanimoto = f1[,1])[-1,]
DT::datatable(f1)
names(f)
f1 <- data.frame(Drug = names(f[-1]), Tanimoto = f1[-1,1])
f1[-1,1]
DT::datatable(f1)
f1 <- as.data.frame(f)
f1 <- t(f1)
#f1[1:4,1:4]
#DT::datatable(f1)
f1 <- Matrix::Matrix(data=f1)
f1 <- proxyC::simil(f1 ,method = "jaccard")
f1 <- as.matrix(f1)
f1 <- as.data.frame(f1)
f1 <- data.frame(Drug = names(f[-1]), Tanimoto = f1[-1,1])
DT::datatable(f1)
library(dplyr)
f1 <- as.data.frame(f) %>%
t() %>%
Matrix::Matrix() %>%
proxyC::simil(method = "jaccard") %>%
as.matrix() %>%
as.data.frame()
f1 <- data.frame(Drug = names(f[-1]), Tanimoto = f1[-1,1])
#DT::datatable(f1)
#f1[1:4,1:4]
DT::datatable(f1)
f1 <- data.frame(Drug = names(f[-1]), Tanimoto = f1[-1,1], stringsAsFactors = F)
disease_network <- COVID19$disease_network
net1 <- pbapply::pblapply(target, function(x){
score_network(disease_network = disease_network, target = x)
})
score_network <- function(disease_network = disease_network, target = target){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target_drug,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target_drug,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
mean_distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
Total_disturbance_rate <- mean_distance - degree
res_network <- c(degree, mean_distance, Total_disturbance_rate)
names(res_network) <- c("Mean_degree_disturbance_rate",
"Mean_distance_disturbance_rate",
"Total_disturbance_rate")
return(res_network)
}
net1 <- pbapply::pblapply(target, function(x){
score_network(disease_network = disease_network, target = x)
})
score_network <- function(disease_network = disease_network, target = target){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
mean_distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
Total_disturbance_rate <- mean_distance - degree
res_network <- c(degree, mean_distance, Total_disturbance_rate)
names(res_network) <- c("Mean_degree_disturbance_rate",
"Mean_distance_disturbance_rate",
"Total_disturbance_rate")
return(res_network)
}
net1 <- pbapply::pblapply(target, function(x){
score_network(disease_network = disease_network, target = x)
})
net1
str(net1)
net2 <- as.data.frame(net1)
DT::datatable(net2)
net1 <- pbapply::pblapply(target[-target$disease], function(x){
score_network(disease_network = disease_network, target = x)
})
net1 <- pbapply::pblapply(target[-1], function(x){
score_network(disease_network = disease_network, target = x)
})
net2 <- as.data.frame(net1)
DT::datatable(net2)
net1 <- pbapply::pblapply(target[-1], function(x){
score_network(disease_network = disease_network, target = x)
})
str(net1)
net2 <- as.data.frame(net1) %>%
t()
DT::datatable(net2)
net2 <- as.data.frame(net2)
net2 <- data.frame(Drug = names(target)[-1],
Mean_degree_disturbance_rate = net2$Mean_degree_disturbance_rate,
Mean_distance_disturbance_rate = net2$Mean_distance_disturbance_rate,
Total_disturbance_rate = net2$Total_disturbance_rate)
DT::datatable(net2)
load_all()
########################################################
res1 <- score_immpc2(disease_biomarker = COVID19$disease_biomarker,
disease_network = COVID19$disease_network,
target = COVID19$herb_target,
geneset = NULL)
load_all()
########################################################
res1 <- score_immpc2(disease_biomarker = COVID19$disease_biomarker,
disease_network = COVID19$disease_network,
target = COVID19$herb_target,
geneset = NULL)
load_all()
########################################################
res1 <- score_immpc2(disease_biomarker = COVID19$disease_biomarker,
disease_network = COVID19$disease_network,
target = COVID19$herb_target,
geneset = NULL)
DT::datatable(res1@ScoreResult)
result <- res1
disease <- result@Fingerprint$disease
disease
drug <- result@Fingerprint[,-1]
drug <- result@Fingerprint[-1]
Tanimoto_f <- function(disease, drug){
f <- rbind(disease, drug)
res_f <- as.data.frame(f) %>%
t() %>%
Matrix::Matrix() %>%
proxyC::simil(method = "jaccard") %>%
as.matrix() %>%
as.data.frame()
res_f <- res_f[1,2]
return(res_f)
}
Tanimoto_f(disease=disease,
drug=drug[[1]])
Tanimoto_f(disease=disease,
drug=drug[[2]])
Tanimoto_f(disease=disease,
drug=drug[[40]])
Tanimoto_f(disease=disease,
drug=drug[[70]])
Tanimoto_f(disease=disease,
drug=drug[[26]])
Tanimoto_f <- function(disease, drug){
f <- rbind(disease, drug)
res_f <- as.data.frame(f) %>%
t() %>%
Matrix::Matrix() %>%
proxyC::simil(method = "jaccard") %>%
as.matrix() %>%
as.data.frame()
res_f <- res_f
return(res_f)
}
Tanimoto_f(disease=disease,
drug=drug[[26]])
Tanimoto_f <- function(disease, drug){
f <- rbind(disease, drug)
res_f <- as.matrix(f) %>%
Matrix::Matrix() %>%
proxyC::simil(method = "jaccard") %>%
as.matrix() %>%
as.data.frame()
res_f <- res_f
return(res_f)
}
Tanimoto_f(disease=disease,
drug=drug[[26]])
f <- rbind(disease, drug[[72]])
res_f <- as.matrix(f) %>%
Matrix::Matrix() %>%
proxyC::simil(method = "jaccard") %>%
as.matrix() %>%
as.data.frame()
res_f
Tanimoto_f <- function(disease, drug){
f <- rbind(disease, drug)
res_f <- as.matrix(f) %>%
Matrix::Matrix() %>%
proxyC::simil(method = "jaccard") %>%
as.matrix() %>%
as.data.frame()
res_f <- res_f[1,2]
return(res_f)
}
Tanimoto_f(disease=disease,
drug=drug[[72]])
#res_rep0 <- NULL
#pb <- tkProgressBar(title="Progress",label="Completed %", min=0, max=100, initial = 0, width = 300)
# u <- c(1:ncol(drug))
#for (i in u) {
n <- 100
res2_list <- lapply(drug, function(x){
res_r <- replicate(n,Tanimoto_f(disease = sample(disease), drug = x))
res_r_mean <- mean(res_r)
res_r_sd <- sd(res_r)
res_r <- c(res_r_mean, res_r_sd)
names(res_r) <- c("mean", "sd")
})
res2_list <- pdapply::pdlapply(drug, function(x){
res_r <- replicate(n,Tanimoto_f(disease = sample(disease), drug = x))
res_r_mean <- mean(res_r)
res_r_sd <- sd(res_r)
res_r <- c(res_r_mean, res_r_sd)
names(res_r) <- c("mean", "sd")
})
res2_list <- pbapply::pblapply(drug, function(x){
res_r <- replicate(n,Tanimoto_f(disease = sample(disease), drug = x))
res_r_mean <- mean(res_r)
res_r_sd <- sd(res_r)
res_r <- c(res_r_mean, res_r_sd)
names(res_r) <- c("mean", "sd")
})
str(res2_list)
res2_list$荷叶
str(res2_list)
res2_list$荷叶
str(res2_list)
res2_list$荷叶
#  res_rep0 <- c(res_rep0, res_rep)
result@ScoreResult$Tanimoto_adj <- res_rep0
res2_list[[1]]
res2_list <- pbapply::pblapply(drug, function(x){
res_r <- replicate(n,Tanimoto_f(disease = sample(disease), drug = x))
res_r_mean <- mean(res_r)
res_r_sd <- sd(res_r)
res_r <- c(res_r_mean, res_r_sd)
names(res_r) <- c("mean", "sd")
res_r
})
str(res2_list)
res2_list[[1]]
res2_list <- as.data.frame(res2_list)
DT::datatable(res2_list)
res2_list <- as.data.frame(t(res2_list))
DT::datatable(res2_list)
res2_list$Tanimoto_adjust <- (result@ScoreResult$Tanimoto - res2_list$mean)/ res2_list$sd
DT::datatable(res2_list)
#res_rep0 <- NULL
#pb <- tkProgressBar(title="Progress",label="Completed %", min=0, max=100, initial = 0, width = 300)
# u <- c(1:ncol(drug))
#for (i in u) {
n <- 1000
res2_list <- pbapply::pblapply(drug, function(x){
res_r <- replicate(n,Tanimoto_f(disease = sample(disease), drug = x))
res_r <- c(mean(res_r), sd(res_r))
names(res_r) <- c("mean", "sd")
res_r
})
res2_list <- as.data.frame(t(res2_list))
DT::datatable(res2_list)
res2_list <- pbapply::pblapply(drug, function(x){
res_r <- replicate(n,Tanimoto_f(disease = sample(disease), drug = x))
res_r <- c(mean(res_r), sd(res_r))
names(res_r) <- c("mean", "sd")
res_r
})
res2_list1 <- as.data.frame(res2_list)
DT::datatable(res2_list1)
DT::datatable(t(res2_list1))
res2_list1 <- t(res2_list1)
DT::datatable(res2_list1)
res2_list1$Tanimoto_adjust <- (result@ScoreResult$Tanimoto - res2_list1$mean)/ res2_list1$sd
res2_list1 <- as.data.frame(res2_list1)
res2_list1$Tanimoto_adjust <- (result@ScoreResult$Tanimoto - res2_list1)/ res2_list1$sd
DT::datatable(res2_list1)
#  res_rep0 <- c(res_rep0, res_rep)
result@ScoreResult$Tanimoto
res2_list1$Tanimoto_adjust <- (result@ScoreResult$Tanimoto - res2_list1$mean)/ res2_list1$sd
DT::datatable(res2_list1)
DT::datatable(result@ScoreResult)
names(res2_list) <- names(drug)
res2_list1 <- as.data.frame(res2_list)
res2_list1 <- t(res2_list1)
DT::datatable(res2_list1)
res2_list <- as.data.frame(res2_list)
res2_list <- as.data.frame(t(res2_list))
res2_list <- data.frame(Drug = names(drug),
mean= res2_list$mean,
sd = res2_list$sd)
res2_list <- merge(res2_list, result@ScoreResult, by="Drug")
DT::datatable(res2_list)
res2_list$Tanimoto_adjust <- (res2_list$Tanimoto - res2_list$mean)/ res2_list$sd
DT::datatable(res2_list)
res3_list <- pbapply::pblapply(result@Target, function(x){
degree <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "degree"))
distance <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F
),
target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
# target is character
score_network <- function(disease_network = disease_network, target = target, method){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- unique(target)
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
if (method == "degree") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
return(degree)
}
if (method == "distance") {
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
return(distance)
}
if (method == "total") {
total_disturbance_rate <- distance - degree
return(total_disturbance_rate)
}
}
res3_list <- pbapply::pblapply(result@Target, function(x){
degree <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "degree"))
distance <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F
),
target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
res3_list <- pbapply::pblapply(result@Target, function(x){
degree <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "degree"))
distance <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F
),
target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
# target is character
score_network <- function(disease_network = disease_network, target = target, method){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- unique(target)
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
if (method == "degree") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
return(degree)
}
if (method == "distance") {
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
return(distance)
}
if (method == "total") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
total_disturbance_rate <- distance - degree
return(total_disturbance_rate)
}
}
# target is character
score_network <- function(disease_network = disease_network, target = target, method){
disease_network <- as.data.frame(disease_network[,1:2])
colnames(disease_network)<- c("node1","node2")
target <- unique(target)
target <- intersect(target, unique(c(disease_network$node1, disease_network$node2)))
disease_network2 <- disease_network[!disease_network$node1 %in% target,]
disease_network2 <- disease_network2[!disease_network2$node2 %in% target,]
g1 <- igraph::graph.data.frame(disease_network, directed = F)
g2 <- igraph::graph.data.frame(disease_network2, directed = F)
if (method == "degree") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
return(degree)
}
if (method == "distance") {
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
return(distance)
}
if (method == "total") {
degree <- (mean(igraph::centr_degree(g2)$res) - mean(igraph::centr_degree(g1)$res))/mean(igraph::centr_degree(g1)$res)
distance <- (igraph::mean_distance(g2, directed = F, unconnected = TRUE) - igraph::mean_distance(g1, directed = F, unconnected = TRUE))/igraph::mean_distance(g1, directed = F, unconnected = TRUE)
total_disturbance_rate <- distance - degree
return(total_disturbance_rate)
}
}
res3_list <- pbapply::pblapply(result@Target, function(x){
degree <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "degree"))
distance <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F
),
target = x,
method = "distance"))
total <- replicate(n, score_network(disease_network = data.frame(node1 = sample(result@DiseaseNetwork[,1]),
node2 = sample(result@DiseaseNetwork[,2]),
stringsAsFactors = F),
target = x,
method = "total"))
res_r2 <- c(mean(degree), sd(degree),
mean(distance), sd(distance),
mean(total), sd(total))
names(res_r2) <- c("mean_degree", "sd_degree",
"mean_distance", "sd_distance",
"mean_total", "sd_total")
res_r2
})
res3_list1 <- as.data.frame(res3_list)
DT::datatable(res3_list1)
res3_list <- as.data.frame(res3_list)
names(result@Target)
res3_list <- as.data.frame(t(res3_list))
DT::datatable(res3_list)
res3_list$Drug <- names(result@Target)
DT::datatable(res3_list)
res3_list <- merge(res3_list, res2_list, by="Drug",sort = F)
DT::datatable(res3_list)
res3_list$Mean_degree_adjust <- (res3_list$Mean_degree_disturbance_rate - res3_list$mean_degree)/res3_list$sd_degree
res3_list$Mean_distance_adjust <- (res3_list$Mean_distance_disturbance_rate - res3_list$mean_distance)/res3_list$sd_distance
res3_list$Total_adjust <- (res3_list$Total_disturbance_rate - res3_list$mean_total)/res3_list$sd_total
DT::datatable(res3_list)
use_package("dplyr")
#####################################################
load_all()
class(res1)
res2 <- score_adjust(res1, n=50)
DT::datatable(res2@ScoreResult)
res2 <- score_adjust(res1, n=50)
#####################################################
load_all()
res2 <- score_adjust(res1, n=50)
res2 <- score_adjust(res2, n=50)
DT::datatable(res2@ScoreResult)
devtools::document()
